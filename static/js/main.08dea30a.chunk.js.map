{"version":3,"sources":["App/App.tsx","reportWebVitals.ts","index.tsx","App/App.module.scss","App/Context/reducer.ts","App/Context/DataProvider.tsx"],"names":["ItemForm","React","lazy","App","useState","open","setOpen","useContext","DataContext","state","data","isLoading","dispatch","handleOpen","prev","handleDelete","id","e","preventDefault","deleteItem","className","styles","container","header","length","section","map","label","item","onClick","button","name","Suspense","fallback","handleClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","DataProvider","StrictMode","document","getElementById","module","exports","ADD_ITEM","DELETE_ITEM","RESET_LOADING","reducer","action","type","payload","uuidV1","filter","x","addItem","resetLoading","initialData","localStorage","getItem","JSON","parse","hasError","errorMessage","intialcontext","_","createContext","children","initialState","useReducer","memoizedState","useMemo","useEffect","setItem","stringify","fn","setTimeout","clearTimeout","Provider","value"],"mappings":"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","file":"static/js/main.08dea30a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport styles from \"./App.module.scss\";\r\nimport {DataContext} from \"./Context/DataProvider\";\r\nimport {deleteItem} from \"./Context/reducer\";\r\n\r\nconst ItemForm = React.lazy(() => import(\"./components/ItemForm\"));\r\n\r\nconst App: React.FC = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const {\r\n    state: {data, isLoading},\r\n    dispatch,\r\n  } = React.useContext(DataContext);\r\n\r\n  const handleOpen = () => {\r\n    setOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleDelete = (id: string) => (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n\r\n    dispatch(deleteItem(id));\r\n  };\r\n\r\n  return (\r\n    <main className={styles.container}>\r\n      <header className={styles.header}>\r\n        <h1>Supermarket List</h1>\r\n        {!isLoading && <h3>{`(${data.length}) items`}</h3>}\r\n      </header>\r\n      <section className={styles.section}>\r\n        {isLoading ? (\r\n          <h3>Loading...</h3>\r\n        ) : (\r\n          <div>\r\n            {data.map(({id, label}) => (\r\n              <div key={id} className={styles.item}>\r\n                <div>{label}</div>\r\n                <span onClick={handleDelete(id)}>delete</span>\r\n              </div>\r\n            ))}\r\n            <button className={styles.button} name=\"add-item\" onClick={handleOpen}>\r\n              Add item\r\n            </button>\r\n          </div>\r\n        )}\r\n      </section>\r\n      <React.Suspense fallback={null}>\r\n        {open && <ItemForm handleClose={handleOpen} />}\r\n      </React.Suspense>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {ReportHandler} from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport DataProvider from \"./App/Context/DataProvider\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./theme.css\";\r\n\r\nReactDOM.render(\r\n  <DataProvider>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </DataProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1BHPT\",\"header\":\"App_header__2NW0Q\",\"section\":\"App_section__3b72o\",\"item\":\"App_item__2xXqc\",\"button\":\"App_button__3E-Mv\"};","import {v1 as uuidV1} from \"uuid\";\r\n\r\nimport {State, Action} from \".././types/State\";\r\nimport {Item} from \".././types/Item\";\r\n\r\nconst ADD_ITEM = \"ADD_ITEM\";\r\nconst DELETE_ITEM = \"DELETE_ITEM\";\r\nconst RESET_LOADING = \"RESET_LOADING\";\r\n\r\nexport default function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case ADD_ITEM: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        data: [...state.data, {...(action.payload as Item), id: uuidV1()}],\r\n      };\r\n    }\r\n\r\n    case DELETE_ITEM: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        data: state.data.filter((x) => x.id !== action.payload),\r\n      };\r\n    }\r\n\r\n    case RESET_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport const addItem = (item: Item): Action => {\r\n  return {\r\n    type: ADD_ITEM,\r\n    payload: item,\r\n  };\r\n};\r\n\r\nexport const deleteItem = (id: string): Action => {\r\n  return {\r\n    type: DELETE_ITEM,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const resetLoading = (): Action => ({type: RESET_LOADING});\r\n","import React from \"react\";\r\n\r\nimport {Action, State} from \"../types/State\";\r\n\r\nimport reducer, {resetLoading} from \"./reducer\";\r\n\r\ninterface contextData {\r\n  state: State;\r\n  dispatch: React.Dispatch<Action>;\r\n}\r\n\r\ninterface DataProviderProps {\r\n  initialState?: State;\r\n}\r\n\r\nconst initialData: State =\r\n  localStorage.getItem(\"state\") !== null\r\n    ? (JSON.parse(localStorage.getItem(\"state\") as string) as State)\r\n    : {\r\n        data: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n        errorMessage: \"\",\r\n      };\r\n\r\nconst intialcontext: contextData = {\r\n  state: initialData,\r\n  dispatch: (_) => {\r\n    return;\r\n  },\r\n};\r\n\r\nexport const DataContext = React.createContext<contextData>(intialcontext);\r\n\r\nconst DataProvider: React.FC<DataProviderProps> = ({children, initialState = initialData}) => {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  const memoizedState: State = React.useMemo(() => state, [state]);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(memoizedState));\r\n  }, [memoizedState]);\r\n\r\n  React.useEffect(() => {\r\n    let fn: NodeJS.Timeout;\r\n\r\n    if (state.isLoading) {\r\n      fn = setTimeout(() => dispatch(resetLoading()), 600);\r\n    }\r\n\r\n    return () => clearTimeout(fn);\r\n  }, [state.isLoading]);\r\n\r\n  return (\r\n    <DataContext.Provider value={{state: memoizedState, dispatch}}>{children}</DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DataProvider;\r\n"],"sourceRoot":""}